using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

using SQLite.Net.Async;
using SQLite.Net.Attributes;

namespace SqLiteTest
{
    public static class TranslateExtension
    {
        public static async Task<T> LocalizeItemAsync<T>(this SQLiteAsyncConnection con, T item, CancellationToken token, string idColumn, int language, int fallbackLanguage = 9) where T : class, ITranslatable
        {
            var table = (TableAttribute)Attribute.GetCustomAttribute(typeof(T), typeof(TableAttribute));
            string query = String.Format("SELECT e.{1} AS Id, COALESCE(o.name, e.name) AS Name FROM {0} e\nLEFT OUTER JOIN {0} " +
                "o ON e.{1} = o.{1} and o.local_language_id = {2}\nWHERE e.local_language_id = {3} AND e.{1} = {4}\nGROUP BY e.{1}",
                table.Name, idColumn, language, fallbackLanguage, item.Id);
            IEnumerable<T> temp = await con.QueryAsync<T>(token, query, new object[0]);
            item.Name = temp.First().Name;
            return item;
        }

        public static async Task<IEnumerable<T>> LocalizeItemsAsnyc<T>(this SQLiteAsyncConnection con, Func<Task<List<T>>> function, CancellationToken token, int language, int fallbackLanguage = 9) where T : class, ITranslatable, new()
        {
            List<T> items = await function();
            T test = new T();
            string query = String.Format("SELECT e.{1} AS id, COALESCE(o.name, e.name) AS name FROM {0} e\nLEFT OUTER JOIN {0} " +
                "o ON e.{1} = o.{1} and o.local_language_id = {2}\nWHERE e.local_language_id = {3}\nGROUP BY e.{1}",
                test.GetNameTable(), test.GetNameTableIdColumn(), language, fallbackLanguage);
            IEnumerable<T> temp = await con.QueryAsync<T>(token, query, new object[0]);
            foreach (T item in items)
            {
                item.Name = temp.First(f => f.Id == item.Id).Name;
            }
            return items;
        }
    }
}

----

namespace SqLiteTest
{
    public interface ITranslatable
    {
        int Id { get; set; }
        string Name { get; set; }

        string GetNameTable();
        string GetNameTableIdColumn();
    }
}

----

IEnumerable<Version> temp = await _asyncConnection.LocalizeItemsAsnyc(() => _asyncConnection.GetAllWithChildrenAsync<Version>(), token, 6);

----

using SQLite.Net.Attributes;

using SQLiteNetExtensions.Attributes;

namespace SqLiteTest
{
    [Table("versions")]
    public class Version : ITranslatable
    {
        [PrimaryKey, Column("id")]
        public int Id { get; set; }
        [ForeignKey(typeof(VersionGroup)), Column("version_group_id")]
        public int VersionGroupId { get; set; }
        [ManyToOne]
        public VersionGroup VersionGroup { get; set; }
        [Column("identifier")]
        public string Identifier { get; set; }
        [Column("name")]
        public string Name { get; set; }
        public string GetNameTable()
        {
            return "version_names";
        }
        public string GetNameTableIdColumn()
        {
            return "version_id";
        }
    }
}

----

using SQLite.Net.Attributes;

namespace SqLiteTest
{
    [Table("version_groups")]
    public class VersionGroup
    {
        [PrimaryKey, Column("id")]
        public int Id { get; set; }
        [Column("identifier")]
        public string Identifier { get; set; }
        [Column("generation_id")]
        public int GenerationId { get; set; }
        [Column("order")]
        public int Order { get; set; }
    }
}
